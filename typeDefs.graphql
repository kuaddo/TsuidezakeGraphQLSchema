enum SuitableTemperature {
  HOT
  WARM
  ROOM
  COLD
  ROCK
}

enum FoodCategory {
  MEAT
  SEAFOOD
  DAIRY
  SNACK
}

type Sake {
  id: Int!
  name: String!
  tags: [Tag!]!
  brewer: String
  description: String
  imgPath: String
  isSuitAtHotTemp: Boolean!
  isSuitAtWarmTemp: Boolean!
  isSuitAtRoomTemp: Boolean!
  isSuitAtColdTemp: Boolean!
  isSuitOnTheRock: Boolean!
  isGoodWithMeatProd: Boolean!
  isGoodWithSeafoodProd: Boolean!
  isGoodWithDairyProd: Boolean!
  isGoodWithDryProd: Boolean!
  suitableTemperatures: [SuitableTemperature!]!
  goodFoodCategories: [FoodCategory!]!
  region: String!
}

type UserSake {
  sake: Sake!
  isTasted: Boolean!
  isWished: Boolean!
}

type Ranking {
  displayOrder: Int!
  category: String!
  contents: [RankingContent!]!
}

type RankingContent {
  rank: Int!
  sake: Sake!
}

type TastedSake {
  sakeId: Int!
  stars: Int!
}

input SakeInput {
  id: Int!
  name: String!
  tags: [TagInput!]!
  brewer: String
  description: String
  imgPath: String
  isSuitAtHotTemp: Boolean!
  isSuitAtWarmTemp: Boolean!
  isSuitAtRoomTemp: Boolean!
  isSuitAtColdTemp: Boolean!
  isSuitOnTheRock: Boolean!
  isGoodWithMeatProd: Boolean!
  isGoodWithSeafoodProd: Boolean!
  isGoodWithDairyProd: Boolean!
  isGoodWithDryProd: Boolean!
  region: String!
}

input TagInput {
  id: Int!
  name: String!
}

input TastedSakeInput {
  sakeId: Int!
  stars: Int!
}

type Tag {
  id: Int!
  name: String!
}

type User {
  uid: String!
}

type Query {
  sake(id: Int!): Sake
  getUserSake(id: Int!): UserSake
  wishList: [Sake!]!
  tastedList: [Sake!]!
  getRankings: [Ranking!]!
  getRecommendedSakes: [RankingContent!]!
  me: User!
}

type Mutation {
  addSake(input: SakeInput!): Sake
  addWishSake(id: Int!): UserSake!
  removeWishSake(id: Int!): UserSake!
  addTastedSake(id: Int!): UserSake!
  addTastedSakeWithStars(input: TastedSakeInput!): UserSake!
  removeTastedSake(id: Int!): UserSake!
}